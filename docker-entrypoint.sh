#!/bin/bash
# FILE="/etc/Caddy"

set -euf -o pipefail

if [[ $# -gt 0 ]] && [[ "${1:0:1}" != '-' ]]; then
    exec $@
fi

readonly DEFAULT_KCPTUN_SECRET="it's a secrect"
readonly DEFAULT_KCPTUN_CRYPT="salsa20"
readonly DEFAULT_WS_PATH="one"
readonly DEFAULT_V2RAY_UUID="51be9a06-299f-43b9-b713-1ec5eb76e3d7"
readonly DEFAULT_PSNAME="V2RAY_WS"

readonly PROG_NAME="$0"

function usage() {
    cat << EOF
Usage:
    ${PROG_NAME} --help
    ${PROG_NAME} [-m|--method <METHOD>] [-p|--ss-password <PASSWORD>]
Options:
    --help                              show help
    -d|--caddy-domain       DOMAIN      caddy domain, you must set DNS first
    -u|--v2ray-uuid         UUID        v2ray uuid, a random uuid will be generated by default
    -p|--ws-path            PATH        v2ray websocket path (default: "${DEFAULT_WS_PATH}")
    -s|--kcptun-secret      PASSWORD    kcptun pre-shared secret between client and server (default: "${DEFAULT_KCPTUN_SECRET}")
    -c|--kcptun-crypt       CRYPT       aes, aes-128, aes-192, salsa20, blowfish, twofish, cast5, 3des, tea, xtea, xor, sm4, none (default: "${DEFAULT_KCPTUN_CRYPT}")
EOF
}

OPTS=$(getopt -n "$0" -o hd:u:p:s:c: --long help,caddy-domain:,v2ray-uuid:,ws-path:,kcptun-secret:,kcptun-crypt: -- "$@")

eval set -- "$OPTS"
help='false'
caddy_domain=""
v2ray_uuid="$(uuidgen)"
ws_path="${DEFAULT_WS_PATH}"
kcptun_secret="${DEFAULT_KCPTUN_SECRET}"
kcptun_crypt="${DEFAULT_KCPTUN_CRYPT}"
psname="${DEFAULT_PSNAME}"

while true; do
    case "$1" in
        -h | --help)
            help='true'
            shift;;
        -d | --caddy-domain)
            caddy_domain="$2"
            shift 2;;
        -u | --v2ray-uuid)
            v2ray_uuid="$2"
            shift 2;;
        -p | --ws-path)
            ws_path="$2"
            shift 2;;
        -s| --kcptun-secret)
            kcptun_secret="$2"
            shift 2;;
        -c | --kcptun-crypt)
            kcptun_crypt="$2"
            shift 2;;
        --)
            shift
            break
            ;;
    esac
done

if [[ $# != 0 ]]; then
    usage
    exit 1
fi

if [[ "${help}" = 'true' ]]; then
    usage
    exit 0
fi

cat > /etc/Caddyfile <<'EOF'
domain
{
  log ./caddy.log
  root /srv/html
  proxy /one :2333 {
    websocket
    header_upstream -Origin
  }
}
EOF
sed -i "s/domain/${caddy_domain}/" /etc/Caddyfile
sed -i "s/one/${ws_path}/" /etc/Caddyfile

# v2ray
cat > /etc/v2ray/config.json <<'EOF'
{
  "inbounds": [
    {
      "port": 2333,
      "protocol": "vmess",
      "settings": {
        "clients": [
          {
            "id": "uuid",
            "alterId": 64
          }
        ]
      },
      "streamSettings": {
        "network": "ws",
        "wsSettings": {
        "path": "/one"
        }
      }
    }
  ],
  "outbounds": [
    {
      "protocol": "freedom",
      "settings": {}
    }
  ]
}
EOF
sed -i "s/uuid/${v2ray_uuid}/" /etc/v2ray/config.json
sed -i "s/one/${ws_path}/" /etc/v2ray/config.json

# js
cat > /srv/sebs.js <<'EOF'
 {
    "add":"domain",
    "aid":"0",
    "host":"",
    "id":"uuid",
    "net":"ws",
    "path":"/one",
    "port":"443",
    "ps":"sebsclub",
    "tls":"tls",
    "type":"none",
    "v":"2"
  }
EOF
if [ "$psname" != "" ] && [ "$psname" != "-c" ]; then
  sed -i "s/sebsclub/${psname}/" /srv/sebs.js
  sed -i "s/domain/${caddy_domain}/" /srv/sebs.js
  sed -i "s/uuid/${v2ray_uuid}/" /srv/sebs.js
  sed -i "s/\/one/\/${ws_path}/" /srv/sebs.js
else
  $*
fi
pwd
cp /etc/Caddyfile .
nohup /bin/parent caddy  --log stdout --agree=false &
echo "配置 JSON 详情"
echo " "
cat /etc/v2ray/config.json
echo " "
node v2ray.js
nohup /usr/local/kcptun/server_linux_amd64 --target '127.0.0.1:2333' --listen ':29900' --key "${kcptun_secret}" --crypt "${kcptun_crypt}" &
/usr/bin/v2ray -config /etc/v2ray/config.json